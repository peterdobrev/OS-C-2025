1) Хардуерни инструменти за защита (lock) на ресурс:
а) enable/disable interrupt
b) test and set
c) atomic swap

a) enable/disable interrupt - механизъм при еднопроцесорните системи, при който ОС временно игнорира превключванията от процесора, за да се постигне атомичност на операция. Минусите на механизма са, че се игнорират всички прекъсвания, дори в участъци, където това е ненужно.

b) test and set - механизъм, при който две действия биват изпълнени като една неделима операция, постигайки атомичност. Променя се стойноста в паметта с някаква предварително избрана стойност (обикновено 1 или true) и старата стойност се запазва в регистрите на процесора.

TEST_AND_SET(memory_location, register):
    temp = *memory_location  
    *memory_location = 1      
    register = temp            

c) atomic swap - атомарна инструкция, която разменя стойност между регистър и памет в един неделим цикъл

ATOMIC_SWAP(memory_location, register):
    temp = *memory_location          // Прочети от паметта
    *memory_location = register      // Запиши стойността от регистъра в паметта
    register = temp                  // Запиши старата стойност от паметта в регистър


Опишете инструмента spinlock, неговите предимства и недостатъци.

spinlock - механизъм за синхронизация, при който процес/нишка се върти в цикъл, проверявайки дали даден ресурс е свободен, вместо да се блокира. Механизмът използва един допълнителен бит, 0 - свободен, 1 - зает. Използва се атомарната операция test and set, за да се достъпи бита. При еднопроцесорните системи е нужно е да се изключат прекъсванията, защото може да доведе до deadlock (нископриоритетен процес влиза и взима lock-а, но бива прекъснат преди да върне lock-a и сега interrupt handler процес B се опитва да вземе lock-a, но се върти безкрайно и ОС не може да бъде превключен, защото е interrupt handler процес).

Примерна имплементация:

struct Spinlock:
  lock: bool

spinlock_lock(s: Spinlock):
  disable_preemption()
  while atomic_test_and_set(s.lock):
    enable_preemption()
    relax()
    disable_preemption()

spinlock_unlock(s: Spinlock):
  atomic_update(s.lock, false)
  enable_preemption()


Плюсовете му са, че е много бърз при кратки критични секции и е прост за имплементация.
Най-големият му минус е, че напразно изразходва CPU цикли. Mоже да предизвика starvation. Може да създаде трафик на системната шина.

2) Каква е спецификата на файловете в следните директории в Linux:
/etc - съдържа конфигурационни файлове за операционната система
/dev - съдържа файлове, представящи различни хардуерни компоненти
/var - съдържа променливи данни, използвани глобално от системата, като например логове, кеш, временни файлове
/proc - виртуална файлова система с информация за работещи процеси и системна информация 
/bin - съдържа изпълними програми, които не са критични за ОС, и съответните им поддържащи файлове
/home - съдържа home директориите на потребителите и техните лични файлове
/usr/share/doc или /usr/share/man - съдържа документационни файлове и ман страници

1) Опишете ситуацията сървенование за ресурси (race condition), дайте пример.
Опишете накратко инструментите за избягване на race condition:
а) дефинирайте критична секция, атомарна обработка на ресурса.
б) инструменти от ниско ниво, специфични хардуерни средства.
в) инструменти от високо ниво, които блокират и събуждат процес.

Race condition - два или повече процеса искат да четат от и пишат по даден ресурс, съответно резултатът от операциите зависи от реда на четенето и писането.

--------------------

Пример: Имаме 2 процеса P и Q, които работят със споделен ресурс balance = 100

P 
p1: read balance
p2: calculate balance + 50
p3: write balance = balance + 50

Q
q1: read balance
q2: calculate balance - 30
q3: write balance = balance - 30

Едновременно изпълнение на P и Q може да изглежда по следния начин:
p1 q1 p2 q2 p3 q3

В този случай резултатът ще бъде 70, вместо желаните 120.

--------------------

Критична секция e част от кода, която достъпва споделени ресурси, които не трябва да биват достъпвани от повече от един процес или нишка едновременно.

Атомарна операция е операция, която не може да бъде прекъсната от ОС, тя или се изпълнява, или не, което я прави thread-safe.

Инструменти от ниско ниво:
- enable/disable interrupt - Работи в еднопроцесорни системи. Временно процесорът игнорира всички хардуерни прекъсвания,осигурявайки атомичност на операциите.
- test and set - атомарна операция, която изпълнява две действия като една неделима стъпка - задава новата стойност и връща старата като резултат.
- допълнителен бит lock - осланя се на test and set операцията, ресурсът притежава допълнителен бит, който показва дали е зает - 1, ако е зает, 0 ако не. Метод spinlock (за многопроцесорна система).
- atomic swap - атомарна операция, обобщена версия на test and set, работи с параметър. Разменя стойности между регистър и памет. 
- compare-and-swap (CAS) - като atomic swap, но променя съдържанието само ако съдържанието съвпада с очакваното.

Инструменти от високо ниво:
- семафори - има брояч, който показва колко ресурса са налични, като процесите могат да "взимат" и "връщат" ресурси чрез две основни операции: wait() - взимане (намаля брояча), signal() - връщане (увеличава брояча). Ако броячът е по-голям от 0, той се намаля и процесът продължава, иначе процеса блокира до освобождаване на ресурс.


2) Каква е спецификата на файловете в следните директории в Linux: 
/etc /dev /var /boot /usr/bin /home /usr/lib /var/log

/etc - конфигурационни файлове на системата и приложенията (текстови файлове за настройки)
/dev - специални файлови устройства (device files), които представят хардуерните компоненти като дискове, терминали, принтери
/var - променливи данни, които се модифицират по време на работа - логове, временни файлове, кеш
/boot - файлове, необхидими за стартиране на системата - kernel imgs, bootloader конфигурации
/usr/bin - Изпълними файлове (програми) за обикновените потребители, които не са критични за системата
/home - home директориите на потребителите, съдържащи лични файлове
/usr/lib - споделени библиотеки (.so файлове) и поддържащи файлове за програмите в /usr/bin
/var/log - лог файлове със записи за системни събития, грешки и активност на различни услуги

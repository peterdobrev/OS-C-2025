1) Дайте кратко определение за: многозадачна ОС, многопотребителска ОС, времеделене.
Опишете разликата между многопотребителска и многозадачна работа.
Какви качества на ОС характеризиарт тези две понятия?

Многозадачна ОС има способността да превключва между изпълнението на множество задачи, така че задачите да напредват в един и същ интервал от време.

Многопотребителска ОС има способността да превключва между обслужването на множество потребители, предоставяйки достъп до своите ресурси.

Времеделене е механизъм, при който ОС нарязва времето на малки интервали, които разпределя между процесите. Всеки процес получава времеви отрязък, в който може да изпълнява своите инструкции. Когато изтече времето на процеса, ОС прекъсва процеса и предава контрола на следващия процес в опашката.

Многозадачната работа се характеризира с превключване между задачите, за да се употребяват по-добре ОС ресурсите, позволявайки на процесите да напредват в един и същ интервал от време, създавайки илюзията за паралелна работа. Многопотребителската работа се характеризира с обслужване на множество потребители като се предоставя достъп до ресурсите на ОС.

Качествата, които характеризират тези две понятия са времеделене, планиране, управление на паметта, синхронизация и комуникация, контекстно превключване

2) Опишете с по 1-2 изречения работата на следните системни извиквания в стандарта POSIX:

- open() -> int open(const char* fileName, int oflag, mode_t mode) - отваря файл с име fileName в режим oflag, а ако не съществува и на oflag е вдигнат O_CREAT бита, го създава. Връща файлов дескриптор за дадения файл или -1 при неуспех.

- close() -> int close(int fd) - затваря файл с даден файлов дескриптор, връща -1 при неуспех.

- lseek() -> off_t lseek(int fd, off_t offset, int whence) - местене на указателя за позиция във файл по подаден файлов дескриптор. Променливата offset указва колко на брой позиции (в байтове) да се отмести. Променлива whence e отправната точка, която може да приема следните стойности: SEEK_SET, SEEK_CUR, SEEK_END

-fork() - създава нов процес-дете, който е почти идентичен на родителя си. Детето наследява всички данни и отворени ресурси на родителя и продължава от реда на извикване на функцията. Връща резултат -1 при неуспешно "форк-ване", 0, ако се намираме в процеса-дете и връща pid-то на детето, ако се намираме в процеса-родител.

-dup2(int oldfd, int newfd) - Затваря ресурса към който е сочил файловият дескриптор newfd и го кара да сочи там, където е сочил oldfd.
